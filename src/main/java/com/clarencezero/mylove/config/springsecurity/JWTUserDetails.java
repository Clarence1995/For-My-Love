package com.clarencezero.mylove.config.springsecurity;

import com.clarencezero.mylove.entity.dao.Role;
import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

/**
 *
 * This class was generated by MyBatis Generator.
 * This class corresponds to the database table love_sys_user
 *
 *
 * @mbg.generated do_not_delete_during_merge
 */
@Getter
@Setter
@ToString
public class JWTUserDetails implements UserDetails {
    /** ID*/
    private long id;

    /** 用户真实姓名*/
    private String name;

    /** 手机号码*/
    private String phone;

    /** 住宅电话*/
    private String telephone;

    /** 联系地址*/
    private String address;

    /** 状态是否可用 0:不可用状态 1可用状态*/
    private boolean enabled;

    /** 用户名*/
    private String username;

    /** 用户密码*/
    private String password;

    /** */
    private String userface;

    /** */
    private String remark;

    /** 该用户的角色*/
    private List<Role> roles;

    private Date lastPasswordResetDate;


    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        List<GrantedAuthority> authorities = new ArrayList<>();
        for (Role role : roles) {
            authorities.add(new SimpleGrantedAuthority(role.getName()));
        }
        return authorities;
    }

    @Override

    @JsonIgnore
    public String getPassword() {
        return password;
    }

    @Override
    public String getUsername() {
        return username;
    }

    @Override
    @JsonIgnore
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    @JsonIgnore
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    @JsonIgnore
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }
}